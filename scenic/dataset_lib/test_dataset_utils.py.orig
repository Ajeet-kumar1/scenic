"""Tests for utilities used in individual datasets and in dataset_utils.py."""

from absl.testing import absltest
from absl.testing import parameterized
import jax.numpy as jnp
import numpy as onp
from scenic.dataset_lib import coco_dataset
from scenic.dataset_lib import dataset_utils
import tensorflow as tf


class DatasetUtilsTest(parameterized.TestCase):
  """Tests Dataset Utilities."""

  def test_maybe_pad_batch(self):
    """Tests maybe_pad_batch."""
    desired_bs = 32
    partial_bs = 13

    complete_batch = {
        'inputs': jnp.array(onp.random.normal(size=(desired_bs, 28, 28, 1))),
        'label': jnp.array(onp.random.normal(size=(desired_bs, 10)))
    }
    partial_batch = {
        'inputs': jnp.array(onp.random.normal(size=(partial_bs, 28, 28, 1))),
        'label': jnp.array(onp.random.normal(size=(partial_bs, 10)))
    }

    ######## test complete training
    outputs = dataset_utils.maybe_pad_batch(
        complete_batch, train=True, batch_size=desired_bs)
    # check output shape
    self.assertEqual(outputs['inputs'].shape, (desired_bs, 28, 28, 1))
    # check weights
    self.assertEqual(outputs['weights'].sum(), float(desired_bs))

    ######## test complete training Test partial training batches
    # assert that the code throws an error as we dont handle partial training
    # batches in the codebase
    with self.assertRaises(ValueError):
      _ = dataset_utils.maybe_pad_batch(
          partial_batch, train=True, batch_size=desired_bs)

    ######## test complete training Test complete test batches
    outputs = dataset_utils.maybe_pad_batch(
        complete_batch, train=False, batch_size=desired_bs)
    # check output shape
    self.assertEqual(outputs['inputs'].shape, (desired_bs, 28, 28, 1))
    # check weights
    self.assertEqual(outputs['weights'].sum(), float(desired_bs))

    ######## test partial test batches
    outputs = dataset_utils.maybe_pad_batch(
        partial_batch, train=False, batch_size=desired_bs)
    # check output shape
    self.assertEqual(outputs['inputs'].shape, (desired_bs, 28, 28, 1))

    # check output padding
    expected_out_pad = jnp.array(
        onp.zeros((desired_bs - partial_bs, 28, 28, 1)))
    out_pad = outputs['inputs'][partial_bs:, :, :, :]
    self.assertTrue(jnp.array_equal(out_pad, expected_out_pad))

    # check weights
    weights = jnp.concatenate([
        jnp.array(onp.ones((partial_bs,))),
        jnp.array(onp.zeros((desired_bs - partial_bs,)))
    ],
                              axis=0)
    self.assertTrue(jnp.array_equal(outputs['weights'], weights))


class COCODatasetTest(parameterized.TestCase):
  """Unit tests for some utility functions in the coco_dataset.py."""

  def setUp(self):
    super(COCODatasetTest, self).setUp()
    # construct a panoptic image of size 2x2 where each pixel is an object and
    # object ids are [[0, 65793], [65794, 65794]]
    # note: in COCO object id is channel_1 + channel_2 * 256 + channel_3 * 256^2
    image = tf.ones(shape=(2, 2, 3), dtype=tf.uint8)
    self.object_ids = tf.constant(
        [1 * 1 + 1 * 256 + 1 * 256 * 256, 2 * 1 + 1 * 256 + 1 * 256 * 256],
        dtype=tf.int64)
    self.object_labels = tf.constant([0, 1], dtype=tf.int64)

    panoptic_channel_1 = tf.constant([[0, 1], [2, 2]], dtype=tf.uint8)
    panoptic_channel_2 = tf.constant([[0, 1], [1, 1]], dtype=tf.uint8)
    panoptic_channel_3 = tf.constant([[0, 1], [1, 1]], dtype=tf.uint8)
    self.panoptic_image = tf.stack(
        [panoptic_channel_1, panoptic_channel_2, panoptic_channel_3], axis=2)
    assert self.panoptic_image.shape == image.shape

  def test_get_coco_instance_masks(self):
    """Tests instance mask creator."""
    instance_masks = coco_dataset.get_coco_instance_masks(
        self.panoptic_image, self.object_ids)
    self.assertEqual(instance_masks.shape, (2, 2, 2, 1))
    expected_instance_mask_0 = [[0, 1], [0, 0]]
    expected_instance_mask_1 = [[0, 0], [1, 1]]
    self.assertTrue(
        jnp.array_equal(instance_masks[0, :, :, 0], expected_instance_mask_0))
    self.assertTrue(
        jnp.array_equal(instance_masks[1, :, :, 0], expected_instance_mask_1))

  def test_get_coco_segmentation_mask(self):
    """Tests instance mask creator."""
    instance_masks = coco_dataset.get_coco_instance_masks(
        self.panoptic_image, self.object_ids)
    segmentation_mask = coco_dataset.get_coco_segmentation_mask(
        instance_masks, self.object_labels)
    self.assertEqual(segmentation_mask.shape, (2, 2))
    self.assertTrue(jnp.array_equal(segmentation_mask, [[0, 1], [2, 2]]))


if __name__ == '__main__':
  absltest.main()
