"""Simple fully connected feedforward neural network classifier."""

import flax.linen as nn
from jax.nn import initializers
import jax.numpy as jnp
import ml_collections
from scenic.dataset_lib import dataset_utils
from scenic.model_lib.base_models.classification_model import ClassificationModel
from scenic.model_lib.base_models.segmentation_model import SegmentationModel
from scenic.model_lib.layers import nn_layers


class SimpleCNN(nn.Module):
  """Defines a simple convolutional neural network.

  The model assumes the input shape is [batch, H, W, C].
  """

  def apply(self,
            x,
            num_outputs,
            num_filters,
            kernel_sizes,
            if_add_biases=None,
            kernel_init=initializers.lecun_normal(),
            bias_init=initializers.zeros,
            output_projection='keep_dims',
            dtype=jnp.float32,
            train=True,
            debug=False):
    """Applies SimpleCNN on the input data.

    Args:
      x: Input tensor.
      num_outputs: int; Number of output classes.
      num_filters: list(int);  Number of filters in each layer.
      kernel_sizes: list(int); Size of kernel in each layer.
      if_add_biases: list(bool); If add bias in each layer.
      kernel_init: Kernel initialization.
      bias_init: Bias initialization.
      output_projection: str; Type of the output projection layer.
      dtype: JAX dtype; model dtype.
      train: bool; Whether the model is running at train time.
      debug: bool; Whether the debug mode is enabled. debug=True enables model
        specific logging/storing some values using jax.host_callback.

    Returns:
      Unnormalized logits.
    """

    if if_add_biases is None:
      if_add_biases = [True] * len(num_filters)
    for n_filters, kernel_size, bias in zip(num_filters, kernel_sizes,
                                            if_add_biases):
      x = nn.Conv(
          x,
          features=n_filters,
          kernel_size=(kernel_size, kernel_size),
          strides=(1, 1),
          bias=bias,
          kernel_init=kernel_init,
          bias_init=bias_init,
          dtype=dtype)
      x = nn.relu(x)

    # head
    x = nn_layers.IdentityLayer(x, name='pre_logits')
    x = nn_layers.OutputProjection(
        x,
        output_projection_configs={'output_projection_type': output_projection},
        num_classes=num_outputs,
        kernel_init=kernel_init,
        bias_init=bias_init,
        dtype=dtype,
        name='output_projection')
    return x


class SimpleCNNClassificationModel(ClassificationModel):
  """Simple CNN model for classifcation task."""

  def build_flax_module(self):
    model_dtype = dataset_utils.DATA_TYPE[self.hparams.get(
        'model_dtype_str', 'float32')].jax_dtype
    return SimpleCNN.partial(
        num_outputs=self.dataset_meta_data['num_classes'],
        num_filters=self.hparams.num_filters,
        kernel_sizes=self.hparams.kernel_sizes,
        if_add_biases=self.hparams.get('if_add_biases', None),
        output_projection='flatten',
        dtype=model_dtype)

  def default_flax_module_hparams(self):
    return ml_collections.ConfigDict(
        dict(
            num_filters=[20, 10],
            kernel_sizes=[3, 3],
            data_dtype_str='float32',
        ))


class SimpleCNNSegmentationModel(SegmentationModel):
  """Simple CNN model for segmentation task."""

  def build_flax_module(self):
    model_dtype = dataset_utils.DATA_TYPE[self.hparams.get(
        'model_dtype_str', 'float32')].jax_dtype
    return SimpleCNN.partial(
        num_outputs=self.dataset_meta_data['num_classes'],
        num_filters=self.hparams.num_filters,
        kernel_sizes=self.hparams.kernel_sizes,
        if_add_biases=self.hparams.get('if_add_biases', None),
        output_projection='keep_dims',
        dtype=model_dtype)

  def default_flax_module_hparams(self):
    return ml_collections.ConfigDict(
        dict(
            num_filters=[20, 10],
            kernel_sizes=[3, 3],
            data_dtype_str='float32',
        ))
